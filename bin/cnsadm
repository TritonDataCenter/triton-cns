#!/opt/triton/cns/build/node/bin/node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2018, Joyent, Inc.
 * Copyright 2016, 2020, The University of Queensland
 */

var dashdash = require('dashdash');
var assert = require('assert-plus');
var utils = require('../lib/utils');
var fs = require('fs');
var cmdUtils = require('../lib/cmd-utils');
var child = require('child_process');
var sprintf = require('sprintf-js').sprintf;
var vasync = require('vasync');
var jsprim = require('jsprim');
var restify = require('restify-clients');

assert.strictEqual(require.main, module);

var argv = process.argv.slice(2);
var subcommand = argv.shift();
while (subcommand && subcommand[0] === '-')
	subcommand = argv.shift();

/* Add base options for all subcommands. */
var options = [
	{
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	}
];

/* Add subcommand-specific options. */
switch (subcommand) {
case 'zones':
	options.push({
		names: ['add', 'a'],
		type: 'bool',
		help: 'Add the given zone as a new entry'
	});
	options.push({
		names: ['delete', 'd'],
		type: 'bool',
		help: 'Remove a zone by the given name'
	});
	break;
case 'peers':
	options.push({
		names: ['delete', 'd'],
		type: 'bool',
		help: 'Remove a peer with the given address'
	});
	break;
default:
	break;
}

var parser = dashdash.createParser({
	options: options
});

try {
	var opts = parser.parse(process.argv);
} catch (e) {
	console.error('cnsadm: error: %s', e.message);
	process.exit(1);
}

if (opts.help || !subcommand) {
	var help = parser.help({}).trimRight();
	console.error('cnsadm: tool for administering CNS');
	console.error('\nsubcommands:');
	console.error('  cnsadm status');
	console.error('  cnsadm vm <uuid>');
	console.error('  cnsadm peers [-d] <address>');
	console.error('  cnsadm config');
	console.error('  cnsadm config [modifiers]');
	console.error('  cnsadm zones');
	console.error('  cnsadm zones <zonename> [modifiers]');
	console.error('  cnsadm zones [-a|-d] <zonename> [modifiers]');
	console.error('  cnsadm upgrade');
	console.error('\nmodifiers:');
	console.error('  field=value');
	console.error('  field+=value (only for arrays)');
	console.error('  field-=value (only for arrays)');
	console.error('\noptions:');
	console.error(help);
	process.exit(1);
}

var zoneName = child.spawnSync('zonename', []).stdout;
if (Buffer.isBuffer(zoneName))
	zoneName = zoneName.toString('ascii');
zoneName = zoneName.trim();

var mdataRet = child.spawnSync('mdata-get', ['sapi-url']);
if (mdataRet.status !== 0) {
	console.error('cnsadm: error: mdata-get failed to retrieve SAPI url');
	process.exit(1);
}
var sapiUrl = mdataRet.stdout;
if (Buffer.isBuffer(sapiUrl))
	sapiUrl = sapiUrl.toString('ascii');
sapiUrl = sapiUrl.trim();

var sapi = restify.createJsonClient(utils.getRestifyClientOptions({
	url: sapiUrl
}));

var SCHEMA = JSON.parse(
    fs.readFileSync('/opt/triton/cns/lib/config-schema.json').
    toString('utf-8'));

var config = JSON.parse(
    fs.readFileSync('/opt/triton/cns/etc/config.json').
    toString('utf-8'));

var args = opts._args;
assert.strictEqual(subcommand, args.shift());

var service;
var waiting = {};

var apiClient;

sapi.get('/configs/' + zoneName, function (err, req, res, obj) {
	if (err) {
		console.error('cnsadm: error: failed to communicate with ' +
		    'SAPI: %s', err.message);
		process.exit(1);
	}

	assert.object(obj.metadata);

	/* Hack to make up for the SAPI template adding this. */
	if (obj.metadata.allow_transfer &&
	    obj.metadata.allow_transfer.indexOf('127.0.0.1') === -1)
		obj.metadata.allow_transfer.push('127.0.0.1');

	Object.keys(config).forEach(function (k) {
		if (obj.metadata.hasOwnProperty(k)) {
			if (!jsprim.deepEqual(config[k], obj.metadata[k]))
				waiting[k] = true;
			config[k] = obj.metadata[k];
		}
	});

	var verr = jsprim.validateJsonObject(SCHEMA, config);
	if (verr !== null && subcommand !== 'upgrade') {
		console.error('cnsadm: error: current config is invaild, ' +
		    'cowardly refusing to do anything. error: ' + verr.name +
		    ': ' + verr.message);
		process.exit(2);
	}

	apiClient = restify.createJsonClient(utils.getRestifyClientOptions({
		url: 'http://127.0.0.1'
	}));

	sapi.get('/services?name=cns', function (err2, req2, res2, objs) {
		if (err2) {
			console.error('cnsadm: error: failed to communicate ' +
			    'with SAPI: %s', err2.message);
			process.exit(1);
		}

		assert.arrayOfObject(objs);
		assert.strictEqual(objs.length, 1);
		service = objs[0].uuid;

		switch (subcommand) {
		case 'config':
			do_config();
			break;
		case 'zones':
			do_zones();
			break;
		case 'status':
			do_status();
			break;
		case 'upgrade':
			do_upgrade();
			break;
		case 'vm':
			do_vm_names();
			break;
		case 'peers':
			do_peers();
			break;
		default:
			console.error('cnsadm: error: unknown subcommand "%s"',
			    subcommand);
			process.exit(1);
			break;
		}
	});
});

function do_config() {
	var schema = {
	    type: 'object',
	    properties: {
		'my_name': {
		    type: 'string',
		    help: 'zone master hostname, SOA mname'
		},
		'hostmaster': {
		    type: 'string',
		    help: 'email contact'
		},
		'use_login': {
		    type: 'boolean',
		    help: 'use user login in DNS names'
		},
		'use_alias': {
		    type: 'boolean',
		    help: 'use VM aliases in DNS names'
		},
		'allow_transfer': {
		    type: 'array',
		    items: {
			type: 'string'
		    },
		    help: 'IPs allowed to use AXFR/IXFR'
		}
	    }
	};
	if (args.length === 0) {
		cmdUtils.printFromSchema(config, schema, waiting);
		process.exit(0);
	}
	var changes = cmdUtils.parseModifiers(args, config, schema);
	if (changes.allow_transfer) {
		var desired = changes.allow_transfer;
		var found = false;
		changes.allow_transfer = [];
		desired.forEach(function (ipMask) {
			if (ipMask === '127.0.0.1') {
				found = true;
				return;
			}
			changes.allow_transfer.push(ipMask);
		});
		if (found === false) {
			console.error('cnsadm: error: 127.0.0.1 ' +
			    'cannot be removed from allow_transfer');
			process.exit(1);
		}
	}
	var newConfig = {};
	Object.keys(config).forEach(function (k) {
		newConfig[k] = config[k];
	});
	Object.keys(changes).forEach(function (k) {
		newConfig[k] = changes[k];
	});
	var verr = jsprim.validateJsonObject(SCHEMA, newConfig);
	if (verr !== null) {
		console.error('cnsadm: new configuration failed to ' +
		    'validate: ' + verr.message);
		process.exit(2);
	}
	changes = {metadata: changes};
	sapi.put('/services/' + service, changes,
	    function (err, req, res, obj) {
		if (err) {
			console.error('cnsadm: error writing to ' +
			    'SAPI: ' + err.message);
			process.exit(1);
		}
	});
}

function do_zones() {
	if (args.length === 0) {
		var columns = [
		    {field: 'zone'},
		    {field: 'networks', stringify: function (v) {
			v = v || [];
			if (v.length === 1 && v[0] === '*')
				return ('*');
			if (v.length === 0)
				return ('');
			return (sprintf('(%d UUIDs)', v.length));
		    }},
		    {field: 'peers', stringify: function (v) {
			return ((v || []).join(','));
		    }},
		    {field: 'hidden_primary', title: 'hidden primary',
			type: 'boolean'},
		    {field: 'proxy_addr', title: 'proxy address',
			type: 'string'},
		    {field: 'proxy_networks', stringify: function (v) {
			v = v || [];
			if (v.length === 1 && v[0] === '*')
				return ('*');
			if (v.length === 0)
				return ('');
			return (sprintf('(%d UUIDs)', v.length));
		    }}
		];
		var objs = Object.keys(config.forward_zones).map(function (z) {
			var obj = config.forward_zones[z];
			obj.zone = z;
			return (obj);
		});
		var rev = config.reverse_zones;
		rev.zone = '(ip-reverse-lookup)';
		objs.push(rev);
		cmdUtils.printTable(columns, objs);
		process.exit(0);
	}
	var zone = args.shift();
	var zobj;
	if (zone === 'ip-reverse-lookup' || zone === 'reverse') {
		zone = 'reverse';
		zobj = config.reverse_zones;
		if (zobj)
			zobj.zone = '(ip-reverse-lookup)';
	} else {
		zobj = config.forward_zones[zone];
		if (zobj)
			zobj.zone = zone;
	}
	if (!zobj) {
		if (opts.add) {
			zobj = {zone: zone};
			config.forward_zones[zone] = zobj;
		} else {
			console.error('cnsadm: error: invalid zone "%s", ' +
			    'did you mean to use -a?', zone);
			process.exit(1);
		}
	}
	var schema = {
	    type: 'object',
	    properties: {
		'zone': {type: 'string'},
		'networks': {
		    type: 'array',
		    items: {type: 'string'}
		},
		'peers': {
		    type: 'array',
		    items: {type: 'string'}
		},
		'hidden_primary': {type: 'boolean'},
		'proxy_addr': {type: 'string'},
		'proxy_networks': {
		    type: 'array',
		    items: {type: 'string'}
		}
	    }
	};
	if (args.length === 0 && !opts['delete']) {
		cmdUtils.printFromSchema(zobj, schema);
		process.exit(0);
	}
	var changes = cmdUtils.parseModifiers(args, zobj, schema);
	/* Detect a rename operation */
	if (changes.zone !== undefined && changes.zone !== zobj.zone &&
	    zone !== 'reverse') {
		delete (config.forward_zones[zone]);
		config.forward_zones[changes.zone] = zobj;
	}
	delete (changes.zone);
	delete (zobj.zone);
	Object.keys(changes).forEach(function (k) {
		zobj[k] = changes[k];
	});

	if (opts['delete'])
		delete (config.forward_zones[zone]);

	if (zone === 'reverse') {
		changes = {metadata: {reverse_zones: config.reverse_zones}};
	} else {
		changes = {metadata: {forward_zones: config.forward_zones}};
	}

	var newConfig = {};
	Object.keys(config).forEach(function (k) {
		newConfig[k] = config[k];
	});
	Object.keys(changes.metadata).forEach(function (k) {
		newConfig[k] = changes.metadata[k];
	});
	var verr = jsprim.validateJsonObject(SCHEMA, newConfig);
	if (verr !== null) {
		console.error('cnsadm: new configuration failed to ' +
		    'validate: ' + verr.message);
		process.exit(2);
	}

	sapi.put('/services/' + service, changes,
	    function (err, req, res, obj) {
		if (err) {
			console.error('cnsadm: error writing to ' +
			    'SAPI: ' + err.message);
			process.exit(1);
		}
	});
}

function do_status() {
	var zones = [];
	var peers = [];
	var zoneLookup = {};

	function listZones(_, cb) {
		apiClient.get('/zones', function (err, req, res, objs) {
			zones = objs;
			objs.forEach(function (obj) {
				zoneLookup[obj.name] = obj;
			});
			cb(err);
		});
	}

	function listPeers(_, cb) {
		apiClient.get('/peers', function (err, req, res, objs) {
			peers = objs;
			cb(err);
		});
	}

	vasync.pipeline({
		funcs: [listZones, listPeers]
	}, function (err, res) {
		if (err) {
			console.error('cnsadm: error communicating with ' +
			    'CNS server: ' + err.message);
			process.exit(1);
		}

		var serial = utils.currentSerial();
		var columns = [
		    {field: 'name', title: 'zone'},
		    {field: 'serial', title: 'latest serial'},
		    {field: 'serial', title: 'changed',
			stringify: function (v) {
				return (cmdUtils.timeUnits((serial - v) * 10) +
				    ' ago');
			}}
		];
		var rows = Object.keys(zones).map(function (k) {
			return (zones[k]);
		});
		cmdUtils.printTable(columns, rows);
		console.log('');

		columns = [
			{field: 'peer'},
			{field: 'zone'},
			{field: 'serial', title: 'latest serial'},
			{field: 'drift'},
			{field: 'version'}
		];
		rows = [];
		peers.forEach(function (peer) {
			var first = true;
			Object.keys(peer.serials).forEach(function (z) {
				var zone = zoneLookup[z];

				var row = {};
				row.peer = '';
				row.version = '';
				if (first) {
					row.peer = peer.address;
					if (peer.version)
						row.version = peer.version;
				}
				row.zone = z;
				var peerSerial = peer.serials[z];
				row.serial = peerSerial;
				row.drift = '';

				if (zone && zone.serial !== undefined) {
					var delta = zone.serial - peerSerial;
					if (delta != 0) {
						var ago = cmdUtils.timeUnits(
						    Math.abs(delta) * 10);
						row.drift = ago;
					}
				} else {
					row.drift = '???';
				}
				rows.push(row);
				first = false;
			});
		});
		cmdUtils.printTable(columns, rows);
	});
}

function do_vm_names() {
	if (args.length !== 1) {
		console.error('usage: cnsadm vm <uuid>');
		console.error('  shows information about CNS and a given VM');
		process.exit(1);
	}
	var uuid = args[0];
	var schema = {
		type: 'object',
		properties: {
			'uuid': { type: 'string' },
			'last_visit': {
				type: 'number',
				stringify: function (v) {
					var now = (new Date()).getTime();
					var delta = (now - v) / 1000;
					return (cmdUtils.timeUnits(delta) +
					    ' ago');
				}
			},
			'names': {
				type: 'array',
				items: { type: 'string' }
			}
		}
	};
	apiClient.get('/vm/' + uuid, function (err, req, res, obj) {
		cmdUtils.printFromSchema(obj, schema);
		process.exit(0);
	});
}

function do_peers() {
	if (args.length != 1) {
		console.error('cnsadm: error: must supply a peer address');
		process.exit(1);
	}
	var addr = args[0];
	if (opts['delete']) {
		apiClient.del('/peer/' + addr, function (err, req, res) {
			if (err) {
				console.error('cnsadm: error: %s: %s',
				    err.name, err.message);
				process.exit(1);
			}
			process.exit(0);
		});
	} else {
		function objStringify(ctrs) {
			var s = '\n';
			Object.keys(ctrs).forEach(function (k) {
				s += sprintf('    %s: %s\n', k, ctrs[k]);
			});
			return (s);
		}
		var schema = {
			type: 'object',
			properties: {
				'address': { type: 'string' },
				'version': { type: 'string' },
				'using_notify': { type: 'boolean' },
				'using_ixfr': { type: 'boolean' },
				'serials': {
					type: 'object',
					stringify: objStringify
				},
				'counters': {
					type: 'object',
					stringify: objStringify
				}
			}
		};
		apiClient.get('/peer/' + addr, function (err, req, res, obj) {
			if (err) {
				console.error('cnsadm: error: %s: %s',
				    err.name, err.message);
				process.exit(1);
			}
			cmdUtils.printFromSchema(obj, schema);
			process.exit(0);
		});
	}
}

function do_upgrade() {
	var didCns46 = false;

	function upgradeZone(zobj) {
		if (zobj.hasOwnProperty('slaves')) {
			didCns46 = true;
			zobj.peers = zobj.slaves;
			delete (zobj.slaves);
		}
		if (zobj.hasOwnProperty('hidden_master')) {
			didCns46 = true;
			zobj.hidden_primary = zobj.hidden_master;
			delete (zobj.hidden_master);
		}
		return (zobj);
	}

	var changes = {};
	changes.reverse_zones = upgradeZone(config.reverse_zones);
	changes.forward_zones = {};
	Object.keys(config.forward_zones).forEach(function (z) {
		var zobj = config.forward_zones[z];
		changes.forward_zones[z] = upgradeZone(zobj);
	});

	var newConfig = {};
	Object.keys(config).forEach(function (k) {
		newConfig[k] = config[k];
	});
	Object.keys(changes).forEach(function (k) {
		newConfig[k] = changes[k];
	});

	if (didCns46)
		console.log('upgrading configuration past CNS-46...');

	if (!didCns46) {
		console.error('no schema upgrades required');
		process.exit(0);
	}

	var verr = jsprim.validateJsonObject(SCHEMA, newConfig);
	if (verr !== null) {
		console.error('cnsadm: new configuration failed to ' +
		    'validate: ' + verr.message);
		process.exit(2);
	}
	changes = {metadata: changes};
	sapi.put('/services/' + service, changes,
	    function (err, req, res, obj) {
		if (err) {
			console.error('cnsadm: error writing to ' +
			    'SAPI: ' + err.message);
			process.exit(1);
		}
	});
}
